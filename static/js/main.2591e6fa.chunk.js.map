{"version":3,"sources":["Pages/Home/Home.jsx","state.js","Utils/getCurrentDateTime.js","Utils/getCumulativeDuration.js","Pages/NotFound/NotFound.jsx","Pages/PreSort/NegativeButton.jsx","Pages/PreSort/PositiveButton.jsx","Pages/PreSort/UncertainButton.jsx","Pages/PreSort/StatementList.jsx","Pages/PreSort/PreSort.jsx","Utils/displayDataObject.js","store.js","Pages/Sort/checkForColumnOverload.js","Pages/Sort/move.js","Pages/Sort/reorder.js","Pages/Sort/headersDivStyle.js","Pages/Sort/Headers.jsx","Pages/Sort/getItemStyle.js","Pages/Sort/getListStyle.js","Pages/Landing/Landing.jsx","Pages/Sort/SortColumn.jsx","Pages/Sort/getListStyleHori.js","Pages/Sort/getItemStyleHori.js","Pages/Sort/Sort.jsx","Pages/PostSort/getPostSortCardStyleHigh.js","Pages/PostSort/LowCards.jsx","Pages/PostSort/HighCards.jsx","Utils/getFormattedViewTime.js","Pages/PostSort/PostSort.jsx","Pages/Survey/Survey.jsx","Pages/SubmitData/SubmitData.jsx","Utils/getRandomId.js","MainRoutes.js","App.js","registerServiceWorker.js","index.js"],"names":["startTime","store","createStore","randomId8","startDate","dataId","landingLastAccess","landingPageDurationCumulative","setRandomId8","state","payload","setStartDate","setStartTime","setDataId","setLandingLastAccess","setLandingPageDurationCumulative","homeLastAccess","homePageDurationCumulative","setHomeLastAccess","setHomePageDurationCumulative","preSortLastAccess","preSortPageDurationCumulative","statementList","setPreSortLastAccess","setPreSortPageDurationCumulative","setStatementList","result","statements","columnN1","draggingOverColumnId","sortResults","sortResultsText","currentSortValue","columnOverload","overloadedColumn","isSortingCards","sortCompleted","numSortedStatements","columnId","sortCharacteristics","qSortPattern","qSortHeaders","qSortHeaderNumbers","sortsForced","columnList","columnStatements","setResult","setStatements","setDraggingOverColumnId","setSortResults","setSortResultsText","setCurrentSortValue","setColumnOverload","setOverloadedColumn","setIsSortingCards","setSortCompleted","setNumSortedStatements","setColumnId","setSortCharacteristics","setColumnList","setColumnStatements","getCurrentDateTime","currentDate","Date","date","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","seconds","getSeconds","getCumulativeDuration","cumulativeDuration2","cumulativeDuration","now","Home","getState","newHomePageDurationCumulative","dispatch","dateString","_this$props","this","props","titleText","subtitleText","bodyTitle","bodyText","nextButtonText","react_default","a","createElement","HomeDiv","className","TitleTextDiv","BodyTitleDiv","BodyTextDiv","es","to","Component","styled","div","_templateObject","_templateObject2","_templateObject3","_templateObject4","NotFound","NegativeButton","border","NegativeButtonWithBorder","id","index","onClick","NegativeButtonNoBorder","button","NegativeButton_templateObject","NegativeButton_templateObject2","PositiveButton","PositiveButtonWithBorder","PositiveButtonNoBorder","PositiveButton_templateObject","PositiveButton_templateObject2","UncertainButton","UncertainButtonWithBorder","UncertainButtonNoBorder","UncertainButton_templateObject","UncertainButton_templateObject2","handleClickNewButton","e","forceUpdate","slice","random","Math","floor","idArray","target","split","colorType","cardColor","divColor","sortValue","greenChecked","pinkChecked","yellowChecked","Object","toConsumableArray","StatementList","map","item","key","statement","concat","style","display","PreSort_NegativeButton","PreSort_UncertainButton","PreSort_PositiveButton","displayDataObject","results","console","log","JSON","stringify","PreSort","newPreSortPageDurationCumulative","_this","_this$props$preSortDa","preSortData","TitleDiv","PreSort_StatementList","displayStateObject","PreSort_templateObject","setState","update","property","hasOwnProperty","value","returnValue","cloneDeep","test","columnN6","columnN5","columnN4","columnN3","columnN2","column0","column1","column2","column3","column4","column5","column6","column7","column8","column9","column10","column12","column13","sortStatements","columnCaution","sortComplete","forcedSorts","sortMessage","homePageDuration","preSortPageDuration","sortPageDuration","postSortPageDuration","surveyPageDuration","totalParticipantDuration","sortPageDurationCumulative","postSortPageDurationCumulative","checkForColumnOverload","columnLengthCheckArray","totalStatements","tempArray","forEach","push","length","reduce","acc","val","move","sourceListArray","destinationListArray","droppableSource","droppableDestination","destClone","_sourceListArray$spli","splice","removed","slicedToArray","droppableId","i","currentColumnLength","vCols","qSortPatternClone","overloadArrayCheck","match","isEqual","reorder","columnToBeReordered","startIndex","endIndex","list","_result$splice","headersDivStyle","columnWidth","headerColorsArray","highlightedColHeader","location2","isNaN","height","minWidth","background","indexOf","fontSize","paddingTop","textAlign","marginBottom","Headers","useStore","headerItem","HeaderDiv","Headers_templateObject","getItemStyle","isDragging","draggableStyle","cardWidth","cardHeight","objectSpread","userSelect","padding","margin","lineHeight","width","borderRadius","alignItems","getListStyle","isDraggingOver","isUnderMaxCards","columnStatementsArray","maxCards","marginTop","marginRight","minHeight","SortColumn","react_beautiful_dnd_esm","provided","snapshot","ref","innerRef","draggableId","assign","draggableProps","dragHandleProps","placeholder","React","getListStyleHori","SortColumn_templateObject","highlighted","horiCardMinHeight","paddingRight","paddingLeft","overflowX","flexDirection","getItemStyleHori","maxWidth","marginLeft","order","Sort","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onDragEnd","source","destination","j","_this2","sortCompleteText","changeColumnHeaderColor","columns","Sort_SortColumn","qSortHeaderNumber","Sort_Headers","direction","getPostSortCardStyleHigh","maxHeight","styles","container","cardAndTextHolder","alignContent","textHolder","flexGrow","cardTag","color","LowCards","onBlur","event","targetCard","arrayToUpdate","columnDisplay","cardsWithComment","el","comment","stateObj","disagreeText","defaultValue","bind","view","HighCards","agreeText","getFormattedViewTime","minutes","justifyContent","paddingBottom","PostSort","firebase","window","Promise","resolve","reject","formattedViewTime","highCardCommentsLocator","agree","lowCardCommentsLocator","disagree","highCardComments","lowCardComments","serverObject","durationPostSortPage","database","error","PostSort_HighCards","PostSort_LowCards","SurveyForm","json","survey_react","onComplete","data","SubmitData","getRandomId","randomId","String","fromCharCode","Landing","newLandingPageDurationCumulative","LandingDiv","Landing_TitleTextDiv","Landing_BodyTitleDiv","Landing_BodyTextDiv","Landing_templateObject","Landing_templateObject2","Landing_templateObject3","Landing_templateObject4","MainRoutes","_props$userData","userData","homeData","sortPageData","postSortData","surveyData","landingData","exact","path","component","Pages_Landing_Landing","Pages_Home_Home","Pages_PreSort_PreSort","Pages_Sort_Sort","Pages_PostSort_PostSort","Survey","App","easy_peasy_esm","src_MainRoutes","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","xhttp","XMLHttpRequest","onreadystatechange","readyState","status","parse","responseText","ReactDOM","render","src_App_0","document","getElementById","open","process","send","URL","origin","addEventListener","fetch","response","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2591e6fa.chunk.js","sourcesContent":["import \"./Home.css\";\nimport { Link } from \"react-router-dom\";\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport store from \"../../state\";\nimport getCurrentDateTime from \"../../Utils/getCurrentDateTime\";\n// import formatCumulativeTime from \"../../Utils/formatCumulativeTime\";\nimport getCumulativeDuration from \"../../Utils/getCumulativeDuration\";\n\nlet startTime;\n\nclass Home extends Component {\n  componentDidMount() {\n    startTime = Date.now();\n  }\n\n  componentWillUnmount() {\n    // get current cumulative time on page\n    const homePageDurationCumulative = store.getState()\n      .homePageDurationCumulative;\n    // calc new cumulative time on page\n    let newHomePageDurationCumulative = getCumulativeDuration(\n      startTime,\n      homePageDurationCumulative\n    );\n    // send cumul time on page to state\n    store.dispatch.setHomePageDurationCumulative(newHomePageDurationCumulative);\n    // send last access time to state\n    const dateString = getCurrentDateTime();\n    store.dispatch.setHomeLastAccess(dateString);\n  }\n\n  render() {\n    const {\n      titleText,\n      subtitleText,\n      bodyTitle,\n      bodyText,\n      nextButtonText\n    } = this.props;\n\n    return (\n      <HomeDiv>\n        <section className=\"hero heroDiv\">\n          <div className=\"hero-body\">\n            <TitleTextDiv>\n              <h1 className=\"title\">{titleText}</h1>\n              <h2 className=\"subtitle\">{subtitleText}</h2>\n            </TitleTextDiv>\n          </div>\n        </section>\n        <BodyTitleDiv>{bodyTitle}</BodyTitleDiv>\n        <BodyTextDiv>{bodyText}</BodyTextDiv>\n        {/* <button className=\"button\">Start TogetherJS</button> */}\n        <div className=\"footer fix-footer footerDiv\">\n          <nav>\n            <Link\n              className=\"button is-link is-large is-outlined is-inverted is-pulled-right\"\n              to=\"/presort\"\n            >\n              {\" \"}\n              {nextButtonText}\n            </Link>\n          </nav>\n        </div>\n      </HomeDiv>\n    );\n  }\n}\n\nexport default Home;\n\nconst BodyTextDiv = styled.div`\n  width: 80%;\n  min-width: 500px;\n  text-align: left;\n  font-size: 32px;\n  margin: auto;\n  padding: 10px;\n`;\n\nconst HomeDiv = styled.div`\n  /* display: flex; */\n  /* justify-content: center; */\n  width: 100%;\n`;\n\nconst TitleTextDiv = styled.div`\n  margin: auto;\n  text-align: center;\n`;\n\nconst BodyTitleDiv = styled.div`\n  font-size: 36px;\n  margin-left: 10%;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  font-weight: bold;\n`;\n","import { createStore } from \"easy-peasy\";\n\nconst store = createStore({\n  // app.js\n  // landing page\n  randomId8: \"\",\n  startDate: \"\",\n  startTime: \"\",\n  dataId: \"\",\n  landingLastAccess: \"\",\n  landingPageDurationCumulative: \"\",\n  // landing page actions\n  setRandomId8: (state, payload) => {\n    state.randomId8 = payload;\n  },\n  setStartDate: (state, payload) => {\n    state.startDate = payload;\n  },\n  setStartTime: (state, payload) => {\n    state.startTime = payload;\n  },\n  setDataId: (state, payload) => {\n    state.dataId = payload;\n  },\n  setLandingLastAccess: (state, payload) => {\n    state.landingLastAccess = payload;\n  },\n  setLandingPageDurationCumulative: (state, payload) => {\n    state.landingPageDurationCumulative = payload;\n  },\n  // home page\n  homeLastAccess: \"\",\n  homePageDurationCumulative: \"\",\n  // home page actions\n  setHomeLastAccess: (state, payload) => {\n    state.homeLastAccess = payload;\n  },\n  setHomePageDurationCumulative: (state, payload) => {\n    state.homePageDurationCumulative = payload;\n  },\n  // pre sort page\n  preSortLastAccess: \"\",\n  preSortPageDurationCumulative: \"\",\n  statementList: [],\n  // pre sort page actions\n  setPreSortLastAccess: (state, payload) => {\n    state.preSortLastAccess = payload;\n  },\n  setPreSortPageDurationCumulative: (state, payload) => {\n    state.preSortPageDurationCumulative = payload;\n  },\n  setStatementList: (state, payload) => {\n    state.statementList = payload;\n  },\n  // sort\n  result: [],\n  statements: [],\n  columnN1: [], // add all columns dynamically\n  draggingOverColumnId: \"column99\",\n  sortResults: [], // array of objects\n  sortResultsText: \"\",\n  currentSortValue: \"\",\n  columnOverload: \"\",\n  overloadedColumn: \"\",\n  isSortingCards: false,\n  sortCompleted: false,\n  numSortedStatements: 0,\n  columnId: \"\",\n  sortCharacteristics: {\n    qSortPattern: [],\n    qSortHeaders: [],\n    qSortHeaderNumbers: [],\n    sortsForced: true\n  },\n  columnList: \"\",\n  columnStatements: {},\n\n  // sort actions\n  setResult: (state, payload) => {\n    state.result = payload;\n  },\n  setStatements: (state, payload) => {\n    state.statements = payload;\n  },\n  setDraggingOverColumnId: (state, payload) => {\n    state.draggingOverColumnId = payload;\n  },\n  setSortResults: (state, payload) => {\n    state.sortResults = payload;\n  },\n  setSortResultsText: (state, payload) => {\n    state.sortResultsText = payload;\n  },\n  setCurrentSortValue: (state, payload) => {\n    state.currentSortValue = payload;\n  },\n  setColumnOverload: (state, payload) => {\n    state.columnOverload = payload;\n  },\n  setOverloadedColumn: (state, payload) => {\n    state.overloadedColumn = payload;\n  },\n  setIsSortingCards: (state, payload) => {\n    state.isSortingCards = payload;\n  },\n  setSortCompleted: (state, payload) => {\n    state.sortCompleted = payload;\n  },\n  setNumSortedStatements: (state, payload) => {\n    state.numSortedStatements = payload;\n  },\n  setColumnId: (state, payload) => {\n    state.columnId = payload;\n  },\n  setSortCharacteristics: (state, payload) => {\n    state.sortCharacteristics = payload;\n  },\n  setColumnList: (state, payload) => {\n    state.columnList = payload;\n  },\n  setColumnStatements: (state, payload) => {\n    state.columnStatements = payload;\n  }\n});\n\nexport default store;\n","const getCurrentDateTime = () => {\n  const currentDate = new Date();\n  const date = currentDate.getDate();\n  const month = currentDate.getMonth(); //Be careful! January is 0 not 1\n  const year = currentDate.getFullYear();\n  const hour = currentDate.getHours();\n  let minute = currentDate.getMinutes();\n  let seconds = currentDate.getSeconds();\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n  if (minute < 10) {\n    minute = \"0\" + minute;\n  }\n  let dateString =\n    date +\n    \"-\" +\n    (month + 1) +\n    \"-\" +\n    year +\n    \" at \" +\n    hour +\n    \"-\" +\n    minute +\n    \"-\" +\n    seconds;\n\n  return dateString;\n};\n\nexport default getCurrentDateTime;\n","// import state from \"../store\";\n// import store from \"../state\";\n\nconst getCumulativeDuration = (startTime, cumulativeDuration2) => {\n  const cumulativeDuration = +cumulativeDuration2;\n  // duration, location\n  let dateNow = Date.now();\n\n  let fullTime = dateNow - startTime + cumulativeDuration;\n\n  return fullTime;\n};\n\nexport default getCumulativeDuration;\n","import React, { Component } from \"react\";\nimport \"./NotFound.css\";\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <div className=\"NotFound\">\n        <h1>404 Page Not Found</h1>\n      </div>\n    );\n  }\n}\n\nexport default NotFound;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst NegativeButton = props => {\n  if (props.border) {\n    return (\n      <NegativeButtonWithBorder\n        id={\"pink-\" + props.index}\n        onClick={props.onClick}\n      >\n        -\n      </NegativeButtonWithBorder>\n    );\n  } else {\n    return (\n      <NegativeButtonNoBorder\n        id={\"pink-\" + props.index}\n        onClick={props.onClick}\n      >\n        -\n      </NegativeButtonNoBorder>\n    );\n  }\n};\n\nexport default NegativeButton;\n\nconst NegativeButtonWithBorder = styled.button`\n  background-color: lightpink;\n  box-sizing: border-box;\n  font-size: 25px;\n  font-weight: bold;\n  width: 40px;\n  height: 35px;\n  border: 3px solid black;\n`;\n\nconst NegativeButtonNoBorder = styled.button`\n  background-color: lightpink;\n  font-size: 25px;\n  box-sizing: border-box;\n  font-weight: normal;\n  width: 40px;\n  height: 35px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst PositiveButton = props => {\n  if (props.border) {\n    return (\n      <PositiveButtonWithBorder\n        id={\"green-\" + props.index}\n        onClick={props.onClick}\n      >\n        +\n      </PositiveButtonWithBorder>\n    );\n  } else {\n    return (\n      <PositiveButtonNoBorder\n        id={\"green-\" + props.index}\n        onClick={props.onClick}\n      >\n        +\n      </PositiveButtonNoBorder>\n    );\n  }\n};\n\nexport default PositiveButton;\n\nconst PositiveButtonWithBorder = styled.button`\n  background-color: #c7f6c7;\n  box-sizing: border-box;\n  font-size: 25px;\n  font-weight: bold;\n  width: 40px;\n  height: 35px;\n  border: 3px solid black;\n`;\n\nconst PositiveButtonNoBorder = styled.button`\n  background-color: #c7f6c7;\n  font-size: 25px;\n  box-sizing: border-box;\n  font-weight: normal;\n  width: 40px;\n  height: 35px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst UncertainButton = props => {\n  if (props.border) {\n    return (\n      <UncertainButtonWithBorder\n        id={\"yellow-\" + props.index}\n        onClick={props.onClick}\n      >\n        ?\n      </UncertainButtonWithBorder>\n    );\n  } else {\n    return (\n      <UncertainButtonNoBorder\n        id={\"yellow-\" + props.index}\n        onClick={props.onClick}\n      >\n        ?\n      </UncertainButtonNoBorder>\n    );\n  }\n};\n\nexport default UncertainButton;\n\nconst UncertainButtonWithBorder = styled.button`\n  background-color: rgba(211, 211, 211, 0.6);\n  box-sizing: border-box;\n  font-size: 25px;\n  font-weight: bold;\n  width: 40px;\n  height: 35px;\n  border: 3px solid black;\n`;\n\nconst UncertainButtonNoBorder = styled.button`\n  background-color: rgba(211, 211, 211, 0.6);\n  font-size: 25px;\n  box-sizing: border-box;\n  font-weight: normal;\n  width: 40px;\n  height: 35px;\n`;\n","import React from \"react\";\nimport \"./StatementList.css\";\nimport store from \"../../state\";\n//import { useStore } from \"easy-peasy\";\nimport NegativeButton from \"./NegativeButton\";\nimport PositiveButton from \"./PositiveButton\";\nimport UncertainButton from \"./UncertainButton\";\n\nconst handleClickNewButton = (e, forceUpdate) => {\n  const columnStatements = store.getState().columnStatements;\n  let statements2 = columnStatements.statementList;\n  let statements = statements2.slice();\n  let random = Math.floor(Math.random() * (9 - 0 + 1)) + 0;\n  const idArray = e.target.id.split(\"-\");\n  const colorType = idArray[0];\n  const id = idArray[1];\n  if (colorType === \"green\") {\n    statements[id].cardColor = \"greenSortCard\";\n    statements[id].divColor = \"isPositiveStatement\";\n    statements[id].sortValue = random;\n    statements[id].greenChecked = true;\n    statements[id].pinkChecked = false;\n    statements[id].yellowChecked = false;\n  }\n  if (colorType === \"yellow\") {\n    statements[id].cardColor = \"yellowSortCard\";\n    statements[id].divColor = \"isUncertainStatement\";\n    statements[id].pinkChecked = false;\n    statements[id].yellowChecked = true;\n    statements[id].greenChecked = false;\n    statements[id].sortValue = 10 + random;\n  }\n  if (colorType === \"pink\") {\n    statements[id].cardColor = \"pinkSortCard\";\n    statements[id].divColor = \"isNegativeStatement\";\n    statements[id].pinkChecked = true;\n    statements[id].yellowChecked = false;\n    statements[id].greenChecked = false;\n    statements[id].sortValue = 1000 + random;\n  }\n  columnStatements.statements = [...statements];\n  store.dispatch.setColumnStatements(columnStatements);\n  forceUpdate();\n};\n\nfunction StatementList(props) {\n  const statementList = props.columnStatements.statementList; // useStore(state => state.columnStatements.statementList);\n  // const statementList = columnStatements.statementList;\n  return (\n    <div className=\"is-scrollable listDiv\">\n      {statementList.map((item, index) => {\n        return (\n          <div\n            id={index}\n            key={item.statement}\n            className={`level levelDiv ${item.divColor}`}\n          >\n            <div className=\"level-item levelItemCustom\">\n              <p>{item.statement}</p>\n            </div>\n\n            <div className=\"is-pulled-right\" style={{ display: \"flex\" }}>\n              <NegativeButton\n                index={index}\n                border={item.pinkChecked}\n                key={item.statement + \"-pink\"}\n                onClick={e => {\n                  handleClickNewButton(e, props.forceUpdate);\n                }}\n              />\n              <UncertainButton\n                index={index}\n                border={item.yellowChecked}\n                key={item.statement + \"-yellow\"}\n                onClick={e => {\n                  handleClickNewButton(e, props.forceUpdate);\n                }}\n              />\n              <PositiveButton\n                index={index}\n                border={item.greenChecked}\n                key={item.statement + \"-green\"}\n                onClick={e => {\n                  handleClickNewButton(e, props.forceUpdate);\n                }}\n              />\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default StatementList;\n","import { Link } from \"react-router-dom\";\nimport React, { Component } from \"react\";\nimport StatementList from \"./StatementList\";\nimport store from \"../../state\";\nimport getCumulativeDuration from \"../../Utils/getCumulativeDuration\";\nimport getCurrentDateTime from \"../../Utils/getCurrentDateTime\";\nimport styled from \"styled-components\";\nimport displayStateObject from \"../../Utils/displayDataObject\";\n// import getFormattedViewTime from \"../../Utils/getFormattedViewTime\";\n// import state from \"../../store\";\n// import store from \"../../state\";\n// import formatCumulativeTime from \"../../Utils/formatCumulativeTime\";\n// import consoleLogDataObject from \"../../Utils/consoleLogDataObject\";\n\nlet startTime;\n\nclass PreSort extends Component {\n  componentDidMount() {\n    startTime = Date.now();\n  }\n\n  componentWillUnmount() {\n    // get current cumulative time on page\n    const preSortPageDurationCumulative = store.getState()\n      .preSortPageDurationCumulative;\n    // calc new cumulative time on page\n    let newPreSortPageDurationCumulative = getCumulativeDuration(\n      startTime,\n      preSortPageDurationCumulative\n    );\n    // send cumul time on page to state\n    store.dispatch.setPreSortPageDurationCumulative(\n      newPreSortPageDurationCumulative\n    );\n    // send last access time to state\n    const dateString = getCurrentDateTime();\n    store.dispatch.setPreSortLastAccess(dateString);\n  }\n\n  render() {\n    const forceUpdate = () => {\n      this.forceUpdate();\n    };\n    const { titleText, nextButtonText } = this.props.preSortData;\n    const columnStatements = store.getState().columnStatements;\n    return (\n      <div className=\"PreSort\">\n        <TitleDiv>\n          <h1 className=\"title\">{titleText}</h1>\n        </TitleDiv>\n        <StatementList\n          columnStatements={columnStatements}\n          forceUpdate={forceUpdate}\n        />\n        <div className=\"footer fix-footer footerDiv\">\n          <nav>\n            <button\n              onClick={displayStateObject}\n              className=\"button is-link is-inverted is-large is-outlined is-pulled-right\"\n            >\n              {\" \"}\n              state\n            </button>\n            <Link\n              className=\"button is-link is-inverted is-large is-outlined is-pulled-right\"\n              to=\"/sort\"\n            >\n              {\" \"}\n              {nextButtonText}\n            </Link>\n          </nav>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PreSort;\n\nconst TitleDiv = styled.div`\n  padding-top: 30px;\n  height: 100px;\n  background: steelblue;\n  text-align: center;\n\n  .titleDiv h1 {\n    color: white;\n  }\n`;\n","import store from \"../state\";\n\nconst displayDataObject = () => {\n  // landing\n  const results = store.getState().result;\n  const columnList = store.getState().columnStatements;\n\n  console.log(\"results => \", JSON.stringify(results));\n  console.log(JSON.stringify(columnList));\n};\n\nexport default displayDataObject;\n","import { store } from \"react-easy-state\";\nimport cloneDeep from \"lodash/cloneDeep\";\n\nlet state = store({\n  setState: function(update) {\n    for (let property in update) {\n      if (update.hasOwnProperty(property)) {\n        this[property] = update[property];\n      }\n    }\n  },\n  getState(value) {\n    let returnValue = this[value];\n    let newReturnValue = cloneDeep(returnValue);\n    return newReturnValue;\n  },\n  test: \"test\",\n  columnN6: [],\n  columnN5: [],\n  columnN4: [],\n  columnN3: [],\n  columnN2: [],\n  columnN1: [],\n  column0: [],\n  column1: [],\n  column2: [],\n  column3: [],\n  column4: [],\n  column5: [],\n  column6: [],\n  column7: [],\n  column8: [],\n  column9: [],\n  column10: [],\n  column12: [],\n  column13: [],\n  sortStatements: [],\n  columnCaution: [],\n  isSortingCards: true,\n  numSortedStatements: 0,\n  qSortHeaders: [],\n  qSortHeaderNumbers: [],\n  qSortPattern: [],\n  sortComplete: false,\n  forcedSorts: true,\n  sortMessage: \"\",\n  draggingOverColumnId: \"column99\",\n  homePageDuration: 0,\n  preSortPageDuration: 0,\n  sortPageDuration: 0,\n  postSortPageDuration: 0,\n  surveyPageDuration: 0,\n  totalParticipantDuration: 0,\n  homePageDurationCumulative: 0,\n  preSortPageDurationCumulative: 0,\n  sortPageDurationCumulative: 0,\n  postSortPageDurationCumulative: 0,\n  randomId8: \"initialize\"\n});\n\nexport default state;\n","import state from \"../../store\";\n\nconst checkForColumnOverload = (\n  columnLengthCheckArray,\n  forcedSorts,\n  totalStatements\n) => {\n  const qSortPattern = state.getState(\"qSortPattern\"); // num cards in each column\n  const qSortHeaderNumbers = state.getState(\"qSortHeaderNumbers\");\n\n  if (forcedSorts === true) {\n    let tempArray = [];\n    columnLengthCheckArray.forEach(function(item, index) {\n      if (item > qSortPattern[index]) {\n        tempArray.push(qSortHeaderNumbers[index]);\n        state.setState({\n          sortCompleted: false,\n          overloadedColumn: qSortHeaderNumbers[index],\n          columnOverload: true,\n          isSortingCards: false\n        });\n        return null;\n      }\n    });\n    if (tempArray.length === 0) {\n      state.setState({\n        columnOverload: false,\n        isSortingCards: true\n      });\n    }\n  }\n\n  let numSortedStatements = columnLengthCheckArray.reduce(function(acc, val) {\n    return acc + val;\n  });\n\n  state.setState({\n    numSortedStatements: numSortedStatements\n  });\n\n  if (forcedSorts === false) {\n    if (numSortedStatements === totalStatements) {\n      state.setState({\n        sortCompleted: true,\n        isSortingCards: false\n      });\n    } else {\n      state.setState({\n        sortCompleted: false,\n        isSortingCards: true\n      });\n    }\n  }\n};\n\nexport default checkForColumnOverload;\n","import store from \"../../state\";\n// import state from \"../../store\";\nimport isEqual from \"lodash/isEqual\";\nimport checkForColumnOverload from \"./checkForColumnOverload\";\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (\n  sourceListArray,\n  destinationListArray,\n  droppableSource,\n  droppableDestination,\n  columnStatements\n) => {\n  // const move = (source, destination, droppableSource, droppableDestination) => {\n\n  // console.log(\"sourceListArray \" + JSON.stringify(sourceListArray));\n  // console.log(\"destinationListArray \" + JSON.stringify(destinationListArray));\n  // console.log(\"droppable source \" + JSON.stringify(droppableSource));\n  // console.log(\"droppable destination \" + JSON.stringify(droppableDestination));\n  // console.log(\"columnStatements \" + JSON.stringify(columnStatements));\n\n  // const qSortPattern = state.getState(\"qSortPattern\"); // [], num cards in each column\n  // const qSortHeaders = state.getState(\"qSortHeaders\"); // [], for ex. [\"N4\",\"N3\",\"N2\",\"N1\",0,1,2,3,4]\n  // const forcedSorts = state.getState(\"forcedSorts\"); // bool\n  const sortCharacteristics = store.getState().sortCharacteristics;\n  const qSortPattern = sortCharacteristics.qSortPattern;\n  const qSortHeaders = sortCharacteristics.qSortHeaders;\n  const forcedSorts = sortCharacteristics.forcedSorts;\n\n  const sortPatternClone = [...qSortPattern];\n\n  // todo - move this to props\n  const totalStatements = sortPatternClone.reduce(function(acc, val) {\n    return acc + val;\n  });\n\n  // const sourceClone = [...sourceListArray];\n  const destClone = [...destinationListArray];\n  // to splice in and out\n  // const [removed] = sourceClone.splice(droppableSource.index, 1);\n  // destClone.splice(droppableDestination.index, 0, removed);\n  const [removed] = sourceListArray.splice(droppableSource.index, 1);\n  destinationListArray.splice(droppableDestination.index, 0, removed);\n  console.log(\"TCL: //move -> destinationListArray\", destinationListArray);\n\n  sourceListArray[droppableSource.droppableId] = [removed];\n  destinationListArray[droppableDestination.droppableId] = [...destClone];\n\n  // to assign to object and register results to state\n  const result = {};\n  // result[droppableSource.droppableId] = sourceClone;\n  // result[droppableDestination.droppableId] = destClone;\n  result[droppableSource.droppableId] = [...sourceListArray];\n  result[droppableDestination.droppableId] = [...destinationListArray];\n\n  // to save to state and auto update lists\n  // state.setState(result);\n  store.dispatch.setResult(result);\n\n  // for sort complete checking\n  let columnLengthCheckArray = [];\n  for (let i = 0; i < qSortHeaders.length; i++) {\n    // let currentColumnLength = state.getState(\"column\" + qSortHeaders[i]);\n    let currentColumnLength =\n      columnStatements.vCols[\"column\" + qSortHeaders[i]];\n    columnLengthCheckArray.push(currentColumnLength.length);\n  }\n  // sort mutates, so clone\n  let qSortPatternClone = [...qSortPattern];\n  let overloadArrayCheck = [...columnLengthCheckArray];\n  let match = isEqual(columnLengthCheckArray, qSortPatternClone);\n\n  checkForColumnOverload(overloadArrayCheck, forcedSorts, totalStatements);\n\n  // to disable checking if unforced Q sorts allowed\n  if (forcedSorts === true) {\n    if (match === true) {\n      // state.setState({\n      //   sortCompleted: true,\n      //   isSortingCards: false\n      // });\n      store.dispatch.setSortCompleted(true);\n      store.dispatch.setIsSortingCards(false);\n    } else {\n      // state.setState({\n      //   sortCompleted: false\n      // });\n      store.dispatch.setSortCompleted(false);\n    }\n  }\n  return null;\n};\n\nexport default move;\n","// import state from \"../../store\";\nimport store from \"../../state\";\n// to reorder within the same column\nconst reorder = (\n  columnToBeReordered,\n  startIndex,\n  endIndex,\n  columnStatements\n) => {\n  // no re-ordering of statements list / it's arranged by flexbox \"order\" css property\n  if (columnToBeReordered === \"statements\") {\n    return;\n  }\n  // let list = state.getState(columnList);\n  let list = columnStatements.vCols[columnToBeReordered];\n  console.log(\"TCL: list\", JSON.stringify(list));\n\n  const result = [...list]; // Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  console.log(\"TCL: result\", JSON.stringify(result));\n  // to save to state and auto update lists\n\n  // state.setState({\n  //   [columnList]: result\n  // });\n\n  columnStatements.vCols[columnToBeReordered] = [...result];\n\n  store.dispatch.setColumnStatements(columnStatements);\n\n  return null;\n};\n\nexport default reorder;\n","// import state from '../../store';\nimport store from \"../../state\";\n\nconst headersDivStyle = (\n  index,\n  columnWidth,\n  headerColorsArray,\n  qSortHeaders,\n  highlightedColHeader\n) => {\n  // let draggingOverColumnId = state.getState(\"draggingOverColumnId\");\n  let draggingOverColumnId = highlightedColHeader; // store.getState().draggingOverColumnId;\n\n  let location2 = +draggingOverColumnId.slice(6);\n  if (isNaN(location2)) {\n    location2 = draggingOverColumnId.slice(6);\n  }\n\n  let location = qSortHeaders.indexOf(location2);\n\n  let color;\n  if (location === index) {\n    color = \"lightblue\";\n  } else {\n    color = headerColorsArray[index];\n  }\n  return {\n    height: 50,\n    minWidth: columnWidth + 17,\n    border: `solid 2px black`,\n    background: color,\n    fontSize: 25,\n    paddingTop: 5,\n    textAlign: `center`,\n    marginBottom: 10\n  };\n};\n\nexport default headersDivStyle;\n","import React, { Component } from \"react\";\nimport headersDivStyle from \"./headersDivStyle\";\nimport styled from \"styled-components\";\nimport { useStore } from \"easy-peasy\";\n\nconst Headers = props => {\n  const {\n    qSortHeaders,\n    qSortHeaderNumbers,\n    headerColorsArray,\n    columnWidth\n  } = props;\n\n  const highlightedColHeader = useStore(state => state.draggingOverColumnId);\n  console.log(\"TCL: headerHighlightColor\", highlightedColHeader);\n\n  return (\n    <div className=\"headersContainer\">\n      {qSortHeaderNumbers.map((headerItem, index) => (\n        <HeaderDiv\n          style={headersDivStyle(\n            index,\n            columnWidth,\n            headerColorsArray,\n            qSortHeaders,\n            highlightedColHeader\n          )}\n          key={headerItem}\n        >\n          {headerItem}\n        </HeaderDiv>\n      ))}\n    </div>\n  );\n};\n\nexport default Headers;\n\nconst HeaderDiv = styled.div``;\n","const getItemStyle = (isDragging, draggableStyle, cardWidth, cardHeight) => {\n  return {\n    // some basic styles to make the items look a bit nicer\n    userSelect: \"none\",\n    padding: `0 2px 0 2px`,\n    margin: `0 2px 8px 2px`,\n    lineHeight: `1em`,\n    fontSize: 15,\n    height: cardHeight,\n    width: cardWidth,\n    borderRadius: `5px`,\n    display: \"flex\",\n    alignItems: \"center\",\n    // justifyContent: `center`,\n    // change background colour if dragging\n    textAlign: `center`,\n    background: isDragging ? \"#e6bbad\" : \"white\",\n\n    // styles we need to apply on draggables\n    ...draggableStyle\n  };\n};\n\nexport default getItemStyle;\n","import store from \"../../state\";\n// import state from '../../store';\n\n// card and column styling\nconst getListStyle = (isDraggingOver, props, forcedSorts, columnWidth) => {\n  // console.log(JSON.stringify(props.columnStatements));\n  let isUnderMaxCards;\n  if (forcedSorts === true) {\n    isUnderMaxCards =\n      props.columnStatementsArray.length <= props.maxCards ? true : false;\n  } else {\n    isUnderMaxCards = true;\n  }\n\n  // to set highlighting for column headers\n  if (isDraggingOver) {\n    // state.setState({\n    //     draggingOverColumnId: props.columnId\n    // });\n    store.dispatch.setDraggingOverColumnId(props.columnId);\n  }\n\n  return {\n    background: isDraggingOver\n      ? \"lightblue\"\n      : isUnderMaxCards\n        ? \"#e4e4e4\"\n        : \"orange\",\n    padding: `3px 5px 0px 5px`,\n\n    minWidth: columnWidth + 17,\n    marginTop: 50,\n    marginRight: 0,\n    minHeight: props.minHeight,\n    marginBottom: 220,\n    border: \"solid 1px #ededed\",\n    borderRadius: `2px`\n  };\n};\n\nexport default getListStyle;\n","import \"../Home/Home.css\";\nimport { Link } from \"react-router-dom\";\nimport React, { Component } from \"react\";\n// import { view } from \"react-easy-state\";\n// import state from \"../../store\";\nimport styled from \"styled-components\";\nimport store from \"../../state\";\nimport getRandomId from \"../../Utils/getRandomId\";\nimport getCumulativeDuration from \"../../Utils/getCumulativeDuration\";\nimport getCurrentDateTime from \"../../Utils/getCurrentDateTime\";\nimport getFormattedViewTime from \"../../Utils/getFormattedViewTime\";\n\nlet startTime;\n\nclass Landing extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  componentDidMount(props) {\n    // sent participant info to state for storage\n    let randomId8 = getRandomId();\n    let startDate = getFormattedViewTime();\n    startTime = Date.now();\n    store.dispatch.setStartTime(startTime);\n    const id8FromStore = store.getState().randomId8;\n    if (id8FromStore === \"\") {\n      store.dispatch.setRandomId8(randomId8);\n      store.dispatch.setStartDate(startDate);\n      store.dispatch.setDataId(startTime + \"-\" + randomId8);\n    }\n  }\n\n  componentWillUnmount() {\n    // get current cumulative time on page\n    const landingPageDurationCumulative = store.getState()\n      .landingPageDurationCumulative;\n    // calc new cumulative time on page\n    let newLandingPageDurationCumulative = getCumulativeDuration(\n      startTime,\n      landingPageDurationCumulative\n    );\n    // send cumul time on page to state\n    store.dispatch.setLandingPageDurationCumulative(\n      newLandingPageDurationCumulative\n    );\n    // send last access time to state\n    const dateString = getCurrentDateTime();\n    store.dispatch.setLandingLastAccess(dateString);\n  }\n\n  render() {\n    const { titleText, subtitleText, bodyTitle, nextButtonText } = this.props;\n    // console.log(\"TCL: Landing -> render -> statementList\", statementList);\n    // store.dispatch.setStatementList(statementList);\n\n    // push statements to state\n    // let statements = [];\n    // for (let i = 0; i < statementList.length; i++) {\n    //   statements.push(statementList[i].statement);\n    // }\n    // store.dispatch.setStatements(statements);\n    // console.log(\"TCL: Landing -> render -> statements\", statements);\n\n    return (\n      <LandingDiv>\n        <section className=\"hero heroDiv\">\n          <div className=\"hero-body\">\n            <TitleTextDiv>\n              <h1 className=\"title\">{titleText}</h1>\n              <h2 className=\"subtitle\">{subtitleText}</h2>\n            </TitleTextDiv>\n          </div>\n        </section>\n        <BodyTitleDiv>{bodyTitle}</BodyTitleDiv>\n        <BodyTextDiv>Authenticate, Authenticate, Authenticate</BodyTextDiv>\n        <div className=\"footer fix-footer footerDiv\">\n          <nav>\n            <Link\n              className=\"button is-link is-large is-outlined is-inverted is-pulled-right\"\n              to=\"/home\"\n            >\n              {\" \"}\n              {nextButtonText}\n            </Link>\n          </nav>\n        </div>\n      </LandingDiv>\n    );\n  }\n}\n\nexport default Landing;\n\nconst BodyTextDiv = styled.div`\n  width: 80%;\n  min-width: 500px;\n  text-align: left;\n  font-size: 32px;\n  margin: auto;\n  padding: 10px;\n`;\n\nconst LandingDiv = styled.div`\n  /* display: flex; */\n  /* justify-content: center; */\n  width: 100%;\n`;\n\nconst TitleTextDiv = styled.div`\n  margin: auto;\n  text-align: center;\n`;\n\nconst BodyTitleDiv = styled.div`\n  font-size: 36px;\n  margin-left: 10%;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  font-weight: bold;\n`;\n","import \"./Sort.css\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport store from \"../../state\";\nimport getItemStyle from \"./getItemStyle\";\nimport getListStyle from \"./getListStyle\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\n\nclass SortColumn extends React.Component {\n  render() {\n    const { forcedSorts, columnWidth, cardHeight, columnId } = this.props;\n\n    // console.log(JSON.stringify(this.props));\n\n    // had to push column sort value to state because didn't want to edit dnd library result object\n    // was't able to just pass it as a prop\n    return (\n      <Droppable droppableId={columnId}>\n        {(provided, snapshot) => {\n          if (snapshot.isDraggingOver) {\n            // state.setState({\n            //   draggingOverColumnId: this.props.columnId,\n            //   currentSortValue: this.props.sortValue\n            // });\n            // this.props.changeColumnHeaderColor(columnId);\n            store.dispatch.setDraggingOverColumnId(this.props.columnId);\n            store.dispatch.setCurrentSortValue(this.props.sortValue);\n          }\n\n          return (\n            <div\n              ref={provided.innerRef}\n              style={getListStyle(\n                snapshot.isDraggingOver,\n                this.props,\n                forcedSorts,\n                columnWidth\n              )}\n            >\n              {this.props.columnStatementsArray.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style,\n                        columnWidth,\n                        cardHeight\n                      )}\n                    >\n                      {item.statement}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          );\n        }}\n      </Droppable>\n    );\n  }\n}\n\nexport default SortColumn;\n\nconst ColumnTitle = styled.div`\n  display: flex;\n  margin: auto;\n  border: 3px solid black;\n  background-color: ${props => (props.highlighted ? \"lightblue\" : \"white\")};\n  height: 35px;\n  font-size: 25px;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 75px;\n  box-sizing: border-box;\n`;\n","// horizontal column styling\nconst getListStyleHori = (isDraggingOver, horiCardMinHeight) => ({\n  background: isDraggingOver ? \"lightblue\" : \"#e4e4e4\",\n  padding: 8,\n  paddingRight: 18,\n  paddingLeft: 18,\n  display: \"flex\",\n  minWidth: 850,\n  minHeight: horiCardMinHeight,\n  overflowX: `scroll`,\n  flexDirection: \"row-reverse\"\n});\n\nexport default getListStyleHori;\n","// card styling\nconst getItemStyleHori = (\n  isDragging,\n  draggableStyle,\n  sortValue,\n  cardColor,\n  columnWidth,\n  cardHeight\n) => {\n  // puts un-evaluated cards at the end of the list and set default color\n  if (isNaN(+sortValue)) {\n    sortValue = 99;\n  }\n  if (cardColor === \"undefined\") {\n    cardColor = \"white\";\n  }\n  return {\n    userSelect: \"none\",\n    lineHeight: `1em`,\n    fontSize: 15,\n    height: cardHeight,\n    minWidth: columnWidth,\n    maxWidth: columnWidth,\n    // padding: `15px, 2px, 2px, 0`,\n    paddingRight: 2,\n    paddingLeft: 2,\n    borderRadius: `5px`,\n    marginBottom: 10,\n    marginRight: `2px`,\n    marginLeft: `2px`,\n    display: \"flex\",\n    alignItems: \"center\",\n    textAlign: `center`,\n    // border: `1px solid lightgray`,\n    order: +sortValue,\n    // change background color if dragging, otherwise pre-sort value color\n    background: isDragging ? \"#e6bbad\" : cardColor,\n    // styles to apply on draggables\n    ...draggableStyle\n  };\n};\n\nexport default getItemStyleHori;\n","import { Link } from \"react-router-dom\";\nimport React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport \"./Sort.css\";\nimport move from \"./move\";\nimport reorder from \"./reorder\";\nimport Headers from \"./Headers\";\nimport store from \"../../state\";\nimport SortColumn from \"./SortColumn\";\nimport getListStyleHori from \"./getListStyleHori\";\nimport getItemStyleHori from \"./getItemStyleHori\";\nimport consoleLogDataObject from \"../../Utils/consoleLogDataObject\";\nimport displayStateObject from \"../../Utils/displayDataObject\";\n\nclass Sort extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      draggingOverColumnId: \"column99\"\n    };\n  }\n\n  componentDidMount() {\n    // let startTime = Date.now();\n    // state.setState({\n    //   startTime: startTime\n    // });\n\n    store.dispatch.setSortCharacteristics({\n      qSortPattern: [...this.props.qSortPattern],\n      qSortHeaders: [...this.props.qSortHeaders],\n      forcedSorts: [this.props.forcedSorts],\n      qSortHeaderNumbers: [...this.props.qSortHeaderNumbers]\n    });\n\n    // consoleLogDataObject();\n  }\n\n  componentWillUnmount() {}\n\n  // x?\n  // x = state.setState({\n  //   qSortPattern: this.props.qSortPattern,\n  //   qSortHeaders: this.props.qSortHeaders,\n  //   forcedSorts: this.props.forcedSorts,\n  //   qSortHeaderNumbers: this.props.qSortHeaderNumbers\n  // });\n  //   state.setState({ qSortPattern, qSortHeaders });\n\n  //L  statementList = this.props.statementList;\n  // statementList = store.getState().columnStatements.statementList;\n  statementList = this.props.columnStatements.statementList;\n\n  // fire move and re-order functions\n  onDragEnd = result => {\n    // console.log(\"result \" + JSON.stringify(result));\n\n    /*\n    example result object:\n    result {\"draggableId\":\"s1\",\"type\":\"DEFAULT\",\n    \"source\":{\"droppableId\":\"statements\",\"index\":0},\n    \"destination\":{\"droppableId\":\"column1\",\"index\":0},\n    \"reason\":\"DROP\"}\n    */\n\n    // state.setState({\n    //   draggingOverColumnId: \"column99\"\n    // });\n    //store.dispatch.setDraggingOverColumnId(\"column99\");\n\n    // source and destination are objects\n    const source = result.source;\n    const destination = result.destination;\n    let columnStatements = this.props.columnStatements;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n    // if moving inside the same column\n    if (source.droppableId === destination.droppableId) {\n      reorder(\n        source.droppableId,\n        source.index,\n        destination.index,\n        columnStatements\n      );\n      this.forceUpdate();\n    } else {\n      // moving to another column\n      // let sortResults = state.getState(\"sortResults\") || this.statementList;\n      let sortResults = store.getState().sortResults || this.statementList;\n\n      // source.droppableId give orgin id => \"statements\" or \"columnN1\"\n      // sourceList is cards in that origin\n      // let sourceList = state.getState(source.droppableId);\n\n      // console.log(\n      //   \"TCL: Sort -> componentWillUnmount -> columnStatements\",\n      //   columnStatements\n      // );\n\n      // gather data to send to move function\n      let sourceListArray;\n      let destinationListArray;\n      if (source.droppableId === \"statements\") {\n        sourceListArray = this.props.columnStatements.statementList;\n      } else {\n        sourceListArray = columnStatements.vCols[source.droppableId];\n      }\n      // let destinationList = state.getState(destination.droppableId);\n      if (destination.droppableId === \"statements\") {\n        destinationListArray = this.props.columnStatements.statementList;\n      } else {\n        destinationListArray = columnStatements.vCols[destination.droppableId];\n      }\n      let droppableSource = source;\n      let droppableDestination = destination;\n\n      // console.log(\"columnStatements \" + JSON.stringify(columnStatements));\n\n      move(\n        sourceListArray,\n        destinationListArray,\n        droppableSource,\n        droppableDestination,\n        columnStatements\n      );\n\n      // console.log(\"columnStatements \" + JSON.stringify(columnStatements));\n\n      // move(sourceList, destinationList, source, destination);\n\n      // sortValue = sort value after drop\n      // let sortValue = state.getState(\"currentSortValue\");\n      let sortValue = store.getState().currentSortValue;\n\n      let draggableId = result.draggableId;\n      // let sortResults = this.sortResults;\n      // insert sort value into sortResults array of statement objects\n      for (let i = 0; i < sortResults.length; i++) {\n        if (sortResults[i].id === draggableId) {\n          sortResults[i].sortValue = sortValue;\n          break;\n        }\n      }\n      // state.setState({ results: results });\n      let sortResultsText = \"\";\n      for (let j = 0; j < sortResults.length; j++) {\n        let sortValue = sortResults[j].sortValue || \"99\";\n        // console.log(JSON.stringify(sortValue));\n\n        sortResultsText = sortResultsText + sortValue;\n        if (j !== sortResults.length - 1) {\n          sortResultsText = sortResultsText + \"|\";\n        }\n      }\n      // console.log(JSON.stringify(sortResultsText));\n      // state.setState({\n      //   sortResults: sortResults,\n      //   sortResultsText: sortResultsText\n      // });\n\n      store.dispatch.setDraggingOverColumnId(\"column99\");\n\n      this.forceUpdate();\n\n      store.dispatch.setSortResults(sortResults);\n      store.dispatch.setSortResultsText(sortResultsText);\n\n      // console.log(JSON.stringify(sortResults));\n    }\n  }; // end of dragEnd helper function\n\n  render() {\n    // let columnStatements = store.getState().columnStatements;\n\n    const {\n      qSortPattern,\n      qSortHeaders,\n      qSortHeaderNumbers,\n      cardHeight,\n      columnWidth,\n      sortCompleteText,\n      nextButtonText,\n      horiCardMinHeight,\n      headerColorsArray,\n      columnStatements\n    } = this.props;\n\n    // console.log(\"column statements \" + JSON.stringify(columnStatements.vCols));\n\n    const sortPatternClone = [...qSortPattern];\n\n    // todo - shift to props\n    const totalStatements = sortPatternClone.reduce(function(acc, val) {\n      return acc + val;\n    });\n\n    const changeColumnHeaderColor = columnId => {\n      this.setState({ draggingOverColumnId: columnId });\n    };\n\n    // code here so statement lists update automatically\n    // let statements = state.getState(\"statements\");\n    let statements = store.getState().columnStatements.statementList;\n    // console.log(\"TCL: Sort -> render -> statements\", statements);\n    // let columnOverload = state.getState(\"columnOverload\");\n    let columnOverload = store.getState().columnOverload;\n    // let overloadedColumn = state.getState(\"overloadedColumn\");\n    let overloadedColumn = store.getState().overloadedColumn;\n    // let isSortingCards = state.getState(\"isSortingCards\");\n    let isSortingCards = store.getState().isSortingCards;\n    // let numSortedStatements = state.getState(\"numSortedStatements\");\n    let numSortedStatements = store.getState.numSortedStatements;\n\n    // MAP out SORT COLUMNS component before render\n    // code inside render so that column lists update automatically\n    let columns = qSortHeaders.map((value, index, highlightedColHeader) => {\n      let columnId = \"column\" + qSortHeaders[index];\n      // console.log(\"TCL: Sort -> render -> columnId\", columnId);\n      let sortValue = qSortHeaderNumbers[index];\n      // let columnStatementsId = state.getState(columnId);\n      // let columnStatementsId = store.getState().columnId;\n      // console.log(\n      //   \"column statements \" + JSON.stringify(columnStatements.vCols[columnId])\n      // );\n\n      return (\n        <SortColumn\n          key={columnId}\n          minHeight={qSortPattern[index] * (cardHeight + 8) + 15}\n          maxCards={qSortPattern[index]}\n          columnId={columnId}\n          columnStatementsArray={columnStatements.vCols[columnId]}\n          forcedSorts={this.props.forcedSorts}\n          columnWidth={columnWidth}\n          cardHeight={cardHeight}\n          sortValue={sortValue}\n          qSortHeaderNumber={this.props.qSortHeaderNumbers[index]}\n          changeColumnHeaderColor={changeColumnHeaderColor}\n        />\n      );\n    }); // end map of sort columns\n\n    let sortCompleted = true;\n\n    // returning main content => horizontal feeder\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <div className=\"rootDiv\">\n          <Headers\n            className=\"hoverBlue\"\n            qSortHeaders={qSortHeaders}\n            qSortHeaderNumbers={qSortHeaderNumbers}\n            columnWidth={columnWidth}\n            headerColorsArray={headerColorsArray}\n            highlightedColHeader={this.state.draggingOverColumnId}\n          />\n          {columns}\n          <div className=\"sortFooter\">\n            <div className=\"cardSlider\">\n              <Droppable droppableId=\"statements\" direction=\"horizontal\">\n                {(provided, snapshot) => (\n                  <div\n                    ref={provided.innerRef}\n                    style={getListStyleHori(\n                      snapshot.isDraggingOver,\n                      horiCardMinHeight\n                    )}\n                  >\n                    {statements.map((item, index) => (\n                      <Draggable\n                        key={item.id}\n                        draggableId={item.id}\n                        index={index}\n                        sortValue={item.sortValue}\n                        cardColor={item.cardColor}\n                      >\n                        {(provided, snapshot) => (\n                          <div\n                            className={`${item.cardColor}`}\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            style={getItemStyleHori(\n                              snapshot.isDragging,\n                              provided.draggableProps.style,\n                              `${item.sortValue}`,\n                              `${item.cardColor}`,\n                              columnWidth,\n                              cardHeight\n                            )}\n                          >\n                            {item.statement}\n                          </div>\n                        )}\n                      </Draggable>\n                    ))}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </div>\n            <div className=\"footerMessageBox\">\n              {sortCompleted && (\n                <div>\n                  <p>{sortCompleteText}</p>\n                  <nav>\n                    <button\n                      style={{ marginRight: 150 }}\n                      onClick={displayStateObject}\n                      className=\"button is-link is-inverted is-large is-outlined is-pulled-right\"\n                    >\n                      {\" \"}\n                      state\n                    </button>\n                    <Link\n                      className=\"button is-link is-large is-outlined sortEndButton\"\n                      to=\"/postsort\"\n                    >\n                      {\" \"}\n                      {nextButtonText}\n                    </Link>\n                  </nav>\n                </div>\n              )}\n              {columnOverload && (\n                <div>\n                  <p>\n                    Column\n                    {overloadedColumn} has too many cards.\n                  </p>\n                </div>\n              )}\n              {isSortingCards && (\n                <div>\n                  <p>\n                    {numSortedStatements} of\n                    {\" \" + totalStatements} cards sorted\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default Sort;\n","// card and column styling\nconst getPostSortCardStyleHigh = (cardHeight, cardWidth) => {\n  return {\n    // some basic styles to make the items look a bit nicer\n    userSelect: \"none\",\n    padding: `0 2px 0 2px`,\n    margin: `5px 5px 5px 5px`,\n    lineHeight: `1em`,\n    fontSize: 15,\n    maxHeight: cardHeight + \"px\",\n    maxWidth: cardWidth + \"px\",\n    borderRadius: `5px`,\n    display: \"flex\",\n    alignItems: \"center\",\n    border: `2px solid black`,\n    background: `#f6f6f6`,\n    textAlign: `center`\n  };\n};\n\nexport default getPostSortCardStyleHigh;\n","import state from \"../../store\";\nimport { view } from \"react-easy-state\";\nimport React, { Component } from \"react\";\nimport getPostSortCardStyleHigh from \"./getPostSortCardStyleHigh\";\n\nconst styles = {\n  container: {\n    width: \"80%\",\n    border: `2px solid black`,\n    marginTop: 50,\n    marginLeft: \"10%\",\n    borderRadius: `3px`\n  },\n  cardAndTextHolder: {\n    display: `flex`,\n    alignContent: `center`,\n    background: `#7e7e7e`\n  },\n  textHolder: {\n    marginTop: 5,\n    flexGrow: 5\n  },\n  cardTag: {\n    width: `100%`,\n    background: `lightpink`,\n    color: `black`,\n    textAlign: `center`\n  }\n};\n\n// example ===> {high: [\"column4\"], middle: [\"column0\"], low: [\"columnN4\"]}\n\nclass LowCards extends Component {\n  onBlur = event => {\n    console.log(\"event target: \" + event.target.id);\n\n    let targetCard = event.target.id;\n    let arrayToUpdate = this.props.columnDisplay[0];\n    console.log(\"update array: \" + JSON.stringify(arrayToUpdate));\n\n    let cards = state.getState(arrayToUpdate);\n    // to update just the card that changed\n    let cardsWithComment = cards.map(el => {\n      if (el.id === targetCard) {\n        el.comment = event.target.value;\n      }\n      return el;\n    });\n\n    // send array with new comment to persist\n    let stateObj = {};\n    stateObj[arrayToUpdate] = cardsWithComment;\n    console.log(\"state obj: \" + JSON.stringify(stateObj));\n\n    state.setState(stateObj);\n  };\n\n  render() {\n    const {\n      columnDisplay,\n      disagreeText,\n      placeholder,\n      height,\n      width\n    } = this.props;\n    let lowCards = state.getState(columnDisplay);\n\n    return lowCards.map((item, index) => (\n      <div key={item.id} style={styles.container}>\n        <div style={styles.cardTag}>{disagreeText}</div>\n        <div style={styles.cardAndTextHolder}>\n          <div />\n          <div style={getPostSortCardStyleHigh(height, width)}>\n            {item.statement}\n          </div>\n          <div className=\"tagContainerDiv\" style={styles.textHolder}>\n            <textarea\n              id={item.id}\n              className=\"textarea\"\n              placeholder={placeholder}\n              defaultValue={item.comment}\n              onBlur={this.onBlur.bind(this)}\n            />\n          </div>\n        </div>\n      </div>\n    ));\n  }\n}\n\nexport default view(LowCards);\n","import state from \"../../store\";\nimport { view } from \"react-easy-state\";\nimport React, { Component } from \"react\";\nimport getPostSortCardStyleHigh from \"./getPostSortCardStyleHigh\";\n\nconst styles = {\n  container: {\n    width: \"80%\",\n    border: `2px solid black`,\n    marginTop: 50,\n    marginLeft: \"10%\",\n    borderRadius: `3px`\n  },\n  cardAndTextHolder: {\n    display: `flex`,\n    alignContent: `center`,\n    background: `#7e7e7e`\n  },\n  textHolder: {\n    marginTop: 5,\n    flexGrow: 5\n  },\n  cardTag: {\n    width: `100%`,\n    background: `#c7f6c7`,\n    color: `black`,\n    textAlign: `center`\n  }\n};\n\n// format example ===> {high: [\"column4\"], middle: [\"column0\"], low: [\"columnN4\"]}\n\nclass HighCards extends Component {\n  onBlur = event => {\n    let targetCard = event.target.id;\n    let arrayToUpdate = this.props.columnDisplay[0];\n    let cards = state.getState(arrayToUpdate);\n    // to update just the card that changed\n    let cardsWithComment = cards.map(el => {\n      if (el.id === targetCard) {\n        el.comment = event.target.value;\n      }\n      return el;\n    });\n\n    // send array with new comment to persist\n    let stateObj = {};\n    stateObj[arrayToUpdate] = cardsWithComment;\n    state.setState(stateObj);\n  };\n\n  render() {\n    const { columnDisplay, agreeText, placeholder, height, width } = this.props;\n    // pull cards from state\n    let highCards = state.getState(columnDisplay);\n\n    return highCards.map((item, index) => (\n      <div key={item.id} style={styles.container}>\n        <div style={styles.cardTag}>{agreeText}</div>\n        <div style={styles.cardAndTextHolder}>\n          <div />\n          <div style={getPostSortCardStyleHigh(height, width)}>\n            {item.statement}\n          </div>\n          <div className=\"tagContainerDiv\" style={styles.textHolder}>\n            <textarea\n              id={item.id}\n              className=\"textarea\"\n              defaultValue={item.comment}\n              placeholder={placeholder}\n              onBlur={this.onBlur.bind(this)}\n            />\n          </div>\n        </div>\n      </div>\n    ));\n  }\n}\n\nexport default view(HighCards);\n","const getFormattedViewTime = () => {\n  let date = new Date();\n  let minutes = +date.getMinutes();\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n  let seconds = +date.getSeconds();\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n\n  let dateTime =\n    date.getDate() +\n    \"/\" +\n    (date.getMonth() + 1) +\n    \"/\" +\n    date.getFullYear() +\n    \" @ \" +\n    date.getHours() +\n    \":\" +\n    minutes +\n    \":\" +\n    seconds;\n  return dateTime;\n};\n\nexport default getFormattedViewTime;\n","import \"./PostSort.css\";\nimport LowCards from \"./LowCards\";\nimport HighCards from \"./HighCards\";\nimport { Link } from \"react-router-dom\";\nimport { view } from \"react-easy-state\";\nimport React, { Component } from \"react\";\nimport state from \"../../store\";\nimport getFormattedViewTime from \"../../Utils/getFormattedViewTime\";\n\nconst styles = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  width: \"100%\",\n  border: `2px solid purple`,\n  paddingBottom: 25\n};\n\nclass PostSort extends Component {\n  componentDidMount() {\n    let startTime = Date.now();\n    state.setState({\n      startTime: startTime\n    });\n  }\n\n  componentWillUnmount() {\n    let firebase = window.firebase;\n    return new Promise((resolve, reject) => {\n      let formattedViewTime = getFormattedViewTime(\n        \"postSortPageDurationCumulative\",\n        \"postSortPageDuration\"\n      );\n      let dataId = state.getState(\"dataId\");\n      // console.log(JSON.stringify(this.props));\n\n      let highCardCommentsLocator = this.props.agree.columnDisplay;\n      let lowCardCommentsLocator = this.props.disagree.columnDisplay;\n\n      let highCardComments = state.getState(highCardCommentsLocator[0]);\n      let lowCardComments = state.getState(lowCardCommentsLocator[0]);\n      console.log(\"low card: \" + JSON.stringify(lowCardComments));\n\n      let serverObject = { durationPostSortPage: formattedViewTime };\n\n      for (let i = 0; i < highCardComments.length; i++) {\n        let locator = highCardComments[i].id;\n        serverObject[\"highCardComment-\" + locator] =\n          highCardComments[i].comment;\n      }\n      for (let j = 0; j < lowCardComments.length; j++) {\n        let locator = lowCardComments[j].id;\n        serverObject[\"lowCardComment-\" + locator] = lowCardComments[j].comment;\n      }\n\n      // console.log(JSON.stringify(serverObject));\n\n      // send to server\n      firebase\n        .database()\n        .ref(dataId)\n        .update(serverObject, function(error) {\n          if (error) {\n            reject(\n              console.log(\n                JSON.stringify(\"there was an error with presort data\")\n              )\n            );\n          } else {\n            resolve(\n              console.log(JSON.stringify(\"postsort data submit success\"))\n            );\n          }\n        });\n\n      // to save as backup for server post failure\n      state.setState({\n        postSortPageDuration: formattedViewTime\n      });\n    });\n  }\n  render() {\n    // console.log(JSON.stringify(this.props));\n    const {\n      titleText,\n      nextButtonText,\n      agree,\n      disagree,\n      columnWidth,\n      cardHeight\n    } = this.props;\n    return (\n      <div>\n        <div className=\"titleDiv\">\n          <h1>{titleText}</h1>\n        </div>\n        <div className=\"scrollableDiv\">\n          <div style={styles}>\n            <HighCards {...agree} height={cardHeight} width={columnWidth} />\n            <LowCards {...disagree} height={cardHeight} width={columnWidth} />\n          </div>\n        </div>\n        <div className=\"footer fix-footer postSortFooter\">\n          <nav>\n            <Link\n              className=\"button is-link is-large is-outlined is-pulled-right\"\n              to=\"/survey\"\n            >\n              {\" \"}\n              {nextButtonText}\n            </Link>\n          </nav>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default view(PostSort);\n","import React from \"react\";\n// import \"./survey.css\";\nimport state from \"../../store\";\n// import { Link } from \"react-router-dom\";\nimport * as Survey from \"survey-react\";\n// import \"survey-react/survey.css\";\n// import 'bootstrap/dist/css/bootstrap.css'\n\n\nclass SurveyForm extends React.Component {\n  // componentWillMount() {\n  //   Survey.Survey.cssType = \"bootstrap\";\n  // Survey.defaultBootstrapCss.navigationButton = \"btn btn-green\";\n  // }\n\n  render() {\n    let firebase = window.firebase;\n    const json = JSON.stringify(this.props);\n    console.log('TCL: SurveyForm -> render -> this.props', this.props)\n\n    // var model = new Survey.Model(json);\n    // console.log(model);\n\n    function sendDataToSurver(result) {\n      console.log(\"result: \" + JSON.stringify(result.data));\n      let dataId = state.getState(\"dataId\");\n\n      console.log(JSON.stringify(result.data));\n\n      firebase\n        .database()\n        .ref(dataId)\n        .update(result.data, function(error) {\n          if (error) {\n            console.log(JSON.stringify(\"there was an error\"));\n          } else {\n            console.log(JSON.stringify(\"success\"));\n          }\n        });\n    }\n\n    return (\n      <div>\n        <Survey.Survey json={ json } onComplete={ sendDataToSurver } />\n      </div>\n      );\n  }\n}\n\nexport default SurveyForm;\n","import React, { Component } from \"react\";\n// import \"./SubmitData.css\";\n\nclass SubmitData extends Component {\n  render() {\n    return (\n      <div className=\"SubmitData\">\n        <h1>SubmitData</h1>\n      </div>\n    );\n  }\n}\n\nexport default SubmitData;\n","import state from \"../store\";\n\nconst getRandomLetter = () => {\n  var randLetter = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n  return randLetter;\n};\n\nconst getRandomId = () => {\n  let randomId = state.getState(\"randomId8\");\n\n  // if coming back to the page, keep the previous id\n  if (randomId !== \"initialize\") {\n    return randomId;\n  }\n\n  randomId = \"\";\n  for (let i = 0; i < 8; i++) {\n    randomId = randomId + getRandomLetter();\n  }\n  return randomId;\n};\n\nexport default getRandomId;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Home from \"./Pages/Home/Home\";\nimport NotFound from \"./Pages/NotFound/NotFound\";\nimport PreSort from \"./Pages/PreSort/PreSort\";\nimport Sort from \"./Pages/Sort/Sort\";\nimport PostSort from \"./Pages/PostSort/PostSort\";\nimport Survey from \"./Pages/Survey/Survey\";\nimport SubmitData from \"./Pages/SubmitData/SubmitData\";\nimport Landing from \"./Pages/Landing/Landing\";\nimport store from \"./state\";\n\nconst MainRoutes = props => {\n  const {\n    homeData,\n    preSortData,\n    columnStatements,\n    sortPageData,\n    postSortData,\n    surveyData,\n    landingData\n  } = props.userData;\n\n  store.dispatch.setColumnStatements(columnStatements);\n\n  return (\n    <main>\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          component={() => (\n            <Landing columnStatements={columnStatements} {...landingData} />\n          )}\n        />\n        <Route path=\"/home\" component={() => <Home {...homeData} />} />\n        <Route\n          path=\"/presort\"\n          component={() => (\n            <PreSort\n              preSortData={preSortData}\n              columnStatements={columnStatements}\n            />\n          )}\n        />\n        <Route\n          path=\"/sort\"\n          component={() => (\n            <Sort {...sortPageData} columnStatements={columnStatements} />\n          )}\n        />\n        <Route\n          path=\"/postsort\"\n          component={() => <PostSort {...postSortData} {...sortPageData} />}\n        />\n        <Route path=\"/survey\" component={() => <Survey {...surveyData} />} />\n        <Route path=\"/submitdata\" component={SubmitData} />\n        <Route path=\"*\" component={NotFound} />\n      </Switch>\n    </main>\n  );\n};\nexport default MainRoutes;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n// import state from \"../src/store\";\n// import getRandomId from \"./Utils/getRandomId\";\n// import getFormattedStartTime from \"./Utils/getFormattedStartTime\";\n// import state from \"./store\";\nimport MainRoutes from \"./MainRoutes\";\nimport { StoreProvider } from \"easy-peasy\";\nimport store from \"./state\";\n\n// let firebase = window.firebase;\n\nclass App extends Component {\n  componentDidMount() {}\n\n  render() {\n    return (\n      <StoreProvider store={store}>\n        <div className=\"App\">\n          <MainRoutes {...this.props} />\n        </div>\n      </StoreProvider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport state from \"../src/store\";\n\nvar xhttp = new XMLHttpRequest();\nvar data = {};\n\nxhttp.onreadystatechange = function() {\n  if (this.readyState === 4 && this.status === 200) {\n    // grad json user settings and push to application state\n    data = JSON.parse(xhttp.responseText);\n    state.setState({\n      // userSettings: data,\n      statements: data.statementList\n    });\n\n    ReactDOM.render(\n      <BrowserRouter>\n        <App userData={data} />\n      </BrowserRouter>,\n      document.getElementById(\"root\")\n    );\n  }\n};\n\nxhttp.open(\"GET\", `${process.env.PUBLIC_URL}/SETTINGS.json`, true);\nxhttp.send();\n\nregisterServiceWorker();\n\n// hot module replacement\nif (module.hot && process.env.NODE_ENV !== \"production\") {\n  module.hot.accept();\n}\n"],"sourceRoot":""}